{"ast":null,"code":"var _jsxFileName = \"/Users/Tar/github/learning/react/06-challenge/src/HerosLogin.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport HeroTextInput from \"./HeroTextImput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginForm = () => {\n  _s();\n\n  const [authToken, setAuthToken] = useState();\n\n  async function submitInfo(email, password) {\n    try {\n      const response = await axios.post(`http://challenge-react.alkemy.org`, {\n        email: email,\n        password: password\n      });\n      console.log(response);\n      console;\n      setAuthToken(response.data);\n      console.log(authToken);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      email: 'challenge@alkemy.org',\n      password: 'react'\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().email('Email inválido').required('Requerido'),\n      password: Yup.string().max(15, 'tiene que ser como maximo de 15 caracteres').required('Requerido')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        //alert(JSON.stringify(values, null, 2));\n        submitInfo(values.email, values.password);\n        setSubmitting(false);\n      }, 400);\n    },\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        style: {\n          width: \"18rem\",\n          margin: \"10rem\",\n          padding: \"2rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          style: {\n            marginTop: \"2rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(HeroTextInput, {\n            label: \"Email\",\n            name: \"email\",\n            type: \"email\",\n            placeHolder: \"challenge@alkemy.org\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(HeroTextInput, {\n            label: \"Password\",\n            name: \"password\",\n            type: \"password\",\n            placeholder: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"submit\",\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginForm, \"VE5S28dwics+aNwyh7LKIGgvbUc=\");\n\n_c = LoginForm;\nexport default LoginForm;\n/*\n <div className=\"card\" style={{width: \"18rem\", margin:\"1rem\", padding:\"2rem\"}}>\n   \n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/Tar/github/learning/react/06-challenge/src/HerosLogin.js"],"names":["useState","Formik","Form","Yup","axios","HeroTextInput","LoginForm","authToken","setAuthToken","submitInfo","email","password","response","post","console","log","data","error","object","string","required","max","values","setSubmitting","setTimeout","width","margin","padding","marginTop"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\nimport { Formik, Form } from \"formik\"\nimport * as Yup from 'yup'\nimport axios from 'axios'\nimport HeroTextInput from \"./HeroTextImput\"\n\nconst LoginForm = () => {\n  \n  const [authToken,setAuthToken] = useState()\n\n  async function submitInfo (email,password) {   \n    try {      \n      const response = await axios.post(\n        `http://challenge-react.alkemy.org`, {\n          email: email,\n          password: password\n      })\n      console.log(response)\n      console\n      setAuthToken(response.data)\n      console.log(authToken)\n    } catch (error){\n      console.error(error)\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={{ \n        email: 'challenge@alkemy.org',\n        password: 'react',       \n      }}\n      validationSchema={Yup.object({\n        email: Yup.string()\n          .email('Email inválido')\n          .required('Requerido'),\n        password: Yup.string()\n          .max(15, 'tiene que ser como maximo de 15 caracteres')\n          .required('Requerido'),        \n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          //alert(JSON.stringify(values, null, 2));\n          submitInfo(values.email, values.password)\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      <>\n      <div className=\"card\" style={{width: \"18rem\", margin:\"10rem\", padding:\"2rem\"}}>\n        <Form style={{marginTop:\"2rem\"}} >\n          <HeroTextInput \n            label=\"Email\"\n            name=\"email\"\n            type=\"email\"\n            placeHolder=\"challenge@alkemy.org\"   \n          />\n          <HeroTextInput \n            label=\"Password\" \n            name=\"password\"\n            type=\"password\"\n            placeholder=\"\"   \n          />\n          <button className=\"btn btn-primary\" type=\"submit\">Enviar</button>   \n        </Form>\n      </div>\n      </>\n    </Formik>\n  )\n}\n\nexport default LoginForm\n\n/*\n <div className=\"card\" style={{width: \"18rem\", margin:\"1rem\", padding:\"2rem\"}}>\n   \n*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}