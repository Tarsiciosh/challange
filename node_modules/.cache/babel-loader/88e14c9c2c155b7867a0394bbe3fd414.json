{"ast":null,"code":"var _jsxFileName = \"/Users/Tar/github/learning/react/06-challenge/src/HeroSearch.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  // useField() returns [formik. getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error \n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props); //tar - inside props we have props.name \n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-label\",\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-text blue\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this) : null]\n  }, void 0, true); // {...field} {...props} -> tar - in props we have the 'placeHolder' for example\n};\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst SearchForm = () => {\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: ''\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string().max(5, 'Must be 15 characters or less').required('Required')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\",\n        placeHolder: \"Superman\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = SearchForm;\nexport default SearchForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"SearchForm\");","map":{"version":3,"sources":["/Users/Tar/github/learning/react/06-challenge/src/HeroSearch.js"],"names":["Formik","Form","useField","Yup","MyTextInput","label","props","field","meta","id","name","touched","error","SearchForm","object","firstName","string","max","required","values","setSubmitting","setTimeout","alert","JSON","stringify"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAsC,QAAtC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAyB;AAAA;;AAC3C;AACA;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBN,QAAQ,CAACI,KAAD,CAA9B,CAJ2C,CAIJ;;AACvC,sBACE;AAAA,4BAEI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAA8B,MAAA,OAAO,EAAEA,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAzD;AAAA,gBAAgEL;AAAhE;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAA,SAAoCE,KAApC;AAAA,SAA+CD;AAA/C;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,gBACC;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBAAiCJ,IAAI,CAACI;AAAtC;AAAA;AAAA;AAAA;AAAA,YADD,GAEG,IANR;AAAA,kBADF,CAL2C,CAcxC;AACJ,CAfD;;GAAMR,W;UAIkBF,Q;;;KAJlBE,W;;AAiBN,MAAMS,UAAU,GAAG,MAAM;AACvB,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbH,MAAAA,IAAI,EAAE;AADO,KADjB;AAIE,IAAA,gBAAgB,EAAEP,GAAG,CAACW,MAAJ,CAAW;AAC3BC,MAAAA,SAAS,EAAEZ,GAAG,CAACa,MAAJ,GACRC,GADQ,CACJ,CADI,EACD,+BADC,EAERC,QAFQ,CAEC,UAFD;AADgB,KAAX,CAJpB;AASE,IAAA,QAAQ,EAAE,CAACC,MAAD,EAAS;AAAEC,MAAAA;AAAF,KAAT,KAA+B;AACvCC,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAC,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAHS,EAGP,GAHO,CAAV;AAID,KAdH;AAAA,2BAgBE,QAAC,IAAD;AAAA,8BACE,QAAC,WAAD;AACE,QAAA,KAAK,EAAC,MADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAA;AAAA;AAAA;AAAA,cARF,eASE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CA/BD;;MAAMP,U;AAiCN,eAAeA,UAAf","sourcesContent":["import { Formik, Form, useField} from \"formik\";\nimport * as Yup from 'yup';\n\nconst MyTextInput = ({ label, ...props }) => { \n  // useField() returns [formik. getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error \n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props); //tar - inside props we have props.name \n  return (\n    <>\n      \n        <label className=\"form-label\" htmlFor={props.id || props.name}>{label}</label>\n        <input className=\"form-control\" {...field} {...props}/> \n        {meta.touched && meta.error ? (\n          <div className=\"form-text blue\">{meta.error}</div>\n        ) : null }\n    </>\n  ); // {...field} {...props} -> tar - in props we have the 'placeHolder' for example\n};\n\nconst SearchForm = () => {\n  return (\n    <Formik\n      initialValues={{ \n        name: ''\n      }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(5, 'Must be 15 characters or less')\n          .required('Required')   \n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      <Form>\n        <MyTextInput \n          label=\"Name\" \n          name=\"name\"\n          type=\"text\"\n          placeHolder=\"Superman\"   \n        />\n\n        <br/>\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default SearchForm"]},"metadata":{},"sourceType":"module"}