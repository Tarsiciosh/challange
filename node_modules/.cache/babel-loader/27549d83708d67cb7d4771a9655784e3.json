{"ast":null,"code":"var _jsxFileName = \"/Users/Tar/github/learning/react/06-challenge/src/HeroSearch.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Formik, Form, useField } from \"formik\";\nimport { useState } from \"react\";\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  // useField() returns [formik. getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error \n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props); //tar - inside props we have props.name \n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        ...field,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-text\",\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false); // {...field} {...props} -> tar - in props we have the 'placeHolder' for example\n};\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst HeroSearch = ({\n  token\n}) => {\n  _s2();\n\n  const [heros, setHeros] = useState({});\n\n  async function getHeros(name) {\n    try {\n      var response = await axios.get(`https://superheroapi.com/api/${token}/search/${name}/`);\n      setHeros(response);\n      console.log(\"results:\", response);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: ''\n      },\n      validationSchema: Yup.object({\n        name: Yup.string().max(5, 'Must be 5 characters or less').required('Required')\n      }),\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          //alert(JSON.stringify(values.name, null, 2));\n          getHeros(values.name);\n          setSubmitting(false);\n        }, 400);\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        style: {\n          marginTop: \"2rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"display-6\",\n          children: \"Search your hero:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          clasName: \"col-auto\",\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\",\n          placeHolder: \"Superman\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s2(HeroSearch, \"fBx71hSqGdxWARorZ/81sF9af80=\");\n\n_c2 = HeroSearch;\nexport default HeroSearch;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"HeroSearch\");","map":{"version":3,"sources":["/Users/Tar/github/learning/react/06-challenge/src/HeroSearch.js"],"names":["Formik","Form","useField","useState","Yup","axios","MyTextInput","label","props","field","meta","touched","error","HeroSearch","token","heros","setHeros","getHeros","name","response","get","console","log","object","string","max","required","values","setSubmitting","setTimeout","marginTop"],"mappings":"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","sourcesContent":["import { Formik, Form, useField} from \"formik\";\nimport { useState } from \"react\";\nimport * as Yup from 'yup';\nimport axios from 'axios'\n\nconst MyTextInput = ({ label, ...props }) => { \n  // useField() returns [formik. getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error \n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props); //tar - inside props we have props.name \n  return (\n    <>\n      <div class=\"mb-3\">\n        {/*<label className=\"form-label\" htmlFor={props.id || props.name}>{label}</label>*/}\n        <input className=\"form-control\" {...field} {...props}/> \n        {meta.touched && meta.error ? (\n          <div className=\"form-text\">{meta.error}</div>\n        ) : null }\n      </div>\n    </>\n  ); // {...field} {...props} -> tar - in props we have the 'placeHolder' for example\n};\n\nconst HeroSearch = ({token}) => {\n\n  const [heros,setHeros] = useState({})\n\n  async function getHeros (name) {   \n    try {      \n      var response = await axios.get(\n        `https://superheroapi.com/api/${token}/search/${name}/`\n      )\n      setHeros(response)\n      console.log(\"results:\",response)\n    } catch (error){\n      console.error(error)\n    }\n  }\n\n  return (\n    <>\n      <Formik\n        initialValues={{ \n          name: ''\n        }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .max(5, 'Must be 5 characters or less')\n            .required('Required')   \n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            //alert(JSON.stringify(values.name, null, 2));\n            getHeros(values.name)\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        <Form style={{marginTop:\"2rem\"}} >\n          <p className=\"display-6\">Search your hero:</p>  \n          <MyTextInput clasName= \"col-auto\"\n            label=\"Name\"\n            name=\"name\"\n            type=\"text\"\n            placeHolder=\"Superman\"   \n          />\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>  \n        </Form>\n      </Formik>\n   \n    </>\n  )\n}\n\nexport default HeroSearch"]},"metadata":{},"sourceType":"module"}