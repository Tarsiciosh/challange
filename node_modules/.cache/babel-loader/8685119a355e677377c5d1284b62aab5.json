{"ast":null,"code":"var _jsxFileName = \"/Users/Tar/github/learning/react/06-challenge/src/HeroSearch.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  // useField() returns [formik. getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error \n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props); //tar - inside props we have props.name \n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true); // {...field} {...props} -> tar - in props we have the 'placeHolder' for example\n};\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst MyCheckbox = ({\n  children,\n  ...props\n}) => {\n  _s2();\n\n  // React treats radios and checkbox inputs differently than other input types,\n  // Formik does it too! When you specify 'type' to useField(), it will \n  // return the correct bag of props for you -- a 'checked' prop will be included\n  // in 'field' alongside 'name', 'value', 'onChange', and 'onBlur'\n  const [field, meta] = useField({ ...props,\n    type: 'checkbox'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        ...field,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", meta.error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(MyCheckbox, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c2 = MyCheckbox;\n\nfunction MySelect({\n  label,\n  ...props\n}) {\n  _s3();\n\n  //another way to declare Components\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: [\" \", props.label, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(\"select\", { ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), meta.touch && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(MySelect, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c3 = MySelect;\n;\n\nconst SearchForm = () => {\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      acceptedTerms: false,\n      //added for our checkbox\n      jobType: '' //added for our select\n\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n      lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n      email: Yup.string().email('Invalid email address').required('Required'),\n      acceptedTerms: Yup.boolean().required('Required').oneOf([true], 'You must accept the terms and conditions.'),\n      jobType: Yup.string().oneOf(['designer', 'developer', 'product', 'other'], 'Invalid Job Type').required('Required')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n        label: \"First Name\",\n        name: \"firstName\",\n        type: \"text\",\n        placeHolder: \"John\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n        label: \"Last Name\",\n        name: \"lastName\",\n        type: \"text\",\n        placeHolder: \"Appleseed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n        label: \"Email Address\",\n        name: \"email\",\n        type: \"email\",\n        placeHolder: \"john@me.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MySelect, {\n        label: \"Job Type\",\n        name: \"jobType\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a job type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"designer\",\n          children: \"Designer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"developer\",\n          children: \"Developer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"product\",\n          children: \"Product Manager\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"other\",\n          children: \"Other\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyCheckbox, {\n        name: \"acceptedTerms\",\n        children: \"I accept the terms and conditions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = SearchForm;\nexport default SearchForm;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"MyCheckbox\");\n$RefreshReg$(_c3, \"MySelect\");\n$RefreshReg$(_c4, \"SearchForm\");","map":{"version":3,"sources":["/Users/Tar/github/learning/react/06-challenge/src/HeroSearch.js"],"names":["Formik","Form","useField","Yup","MyTextInput","label","props","field","meta","id","name","touched","error","MyCheckbox","children","type","MySelect","touch","SearchForm","firstName","lastName","email","acceptedTerms","jobType","object","string","max","required","boolean","oneOf","values","setSubmitting","setTimeout","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import { Formik, Form, useField} from \"formik\";\nimport * as Yup from 'yup';\n\nconst MyTextInput = ({ label, ...props }) => { \n  // useField() returns [formik. getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input>. We can use field meta to show an error \n  // message if the field is invalid and it has been touched (i.e. visited)\n  const [field, meta] = useField(props); //tar - inside props we have props.name \n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input {...field} {...props}/> \n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null }\n    </>\n  ); // {...field} {...props} -> tar - in props we have the 'placeHolder' for example\n};\n\nconst MyCheckbox = ({children, ...props}) => {\n// React treats radios and checkbox inputs differently than other input types,\n// Formik does it too! When you specify 'type' to useField(), it will \n// return the correct bag of props for you -- a 'checked' prop will be included\n// in 'field' alongside 'name', 'value', 'onChange', and 'onBlur'\nconst [field, meta] = useField({...props, type:'checkbox'});\n  return (\n    <div>\n      <label> \n        <input type=\"checkbox\" {...field } {...props} />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div> {meta.error}</div>\n      ) : null }\n    </div>\n  )\n}\n\nfunction MySelect ({ label, ...props }) { //another way to declare Components\n  const [field, meta] = useField(props);\n  return(\n    <div>\n      <label htmlFor={props.id || props.name}> {props.label} </label>  {/* this is a comment! */}  \n      <select {...field} {...props} />\n      {meta.touch && meta.error ? (\n        <div >{meta.error}</div>\n      ) : null}\n    </div>\n  );\n};\n\nconst SearchForm = () => {\n  return (\n    <Formik\n      initialValues={{ \n        firstName: '', \n        lastName: '', \n        email: '',\n        acceptedTerms: false, //added for our checkbox\n        jobType: '', //added for our select\n      }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(15, 'Must be 15 characters or less')\n          .required('Required'),\n        lastName: Yup.string()\n          .max(20, 'Must be 20 characters or less')\n          .required('Required'),\n        email: Yup.string()\n          .email('Invalid email address')\n          .required('Required'),\n        acceptedTerms: Yup.boolean()\n          .required('Required')\n          .oneOf([true], 'You must accept the terms and conditions.'),\n        jobType: Yup.string()\n          .oneOf(\n            ['designer', 'developer', 'product', 'other'],\n            'Invalid Job Type' \n          )\n          .required('Required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      <Form>\n        <MyTextInput \n          label=\"First Name\" \n          name=\"firstName\"\n          type=\"text\"\n          placeHolder=\"John\"   \n        />\n\n        <MyTextInput \n          label=\"Last Name\"\n          name=\"lastName\"\n          type=\"text\"\n          placeHolder=\"Appleseed\"   \n        />\n\n        <MyTextInput \n          label=\"Email Address\"\n          name=\"email\"\n          type=\"email\"\n          placeHolder=\"john@me.com\"   \n        />\n\n        <MySelect label=\"Job Type\" name=\"jobType\">\n          <option value=\"\">Select a job type</option>\n          <option value=\"designer\">Designer</option>\n          <option value=\"developer\">Developer</option>\n          <option value=\"product\">Product Manager</option>\n          <option value=\"other\">Other</option>\n        </MySelect>\n\n        <MyCheckbox name=\"acceptedTerms\">\n          I accept the terms and conditions\n        </MyCheckbox>\n       \n        <br/>\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default SearchForm"]},"metadata":{},"sourceType":"module"}